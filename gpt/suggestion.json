[
    {
        "offset": "0xe25b8",
        "suggestedName": "simply_ret",
        "comment": "Performs no operation and returns immediately."
    },
    {
        "offset": "0xe25e8",
        "suggestedName": "ret_0",
        "comment": "Returns a fixed value of 0."
    },
    {
        "offset": "0xe315c",
        "suggestedName": "ret_p1",
        "comment": "Returns the first parameter passed to the function."
    },
    {
        "offset": "0xe3170",
        "suggestedName": "ret_p1_64",
        "comment": "Returns the first 64-bit parameter passed to the function."
    },
    {
        "offset": "0xe3184",
        "suggestedName": "ret_p1_32",
        "comment": "Returns the first 32-bit parameter passed to the function."
    },
    {
        "offset": "0xe3198",
        "suggestedName": "createMemoryStruct",
        "comment": "Creates a 16-byte structure with the first 8 bytes set to the passed parameter and the next 8 bytes set to 0."
    },
    {
        "offset": "0xe32a8",
        "suggestedName": "validateFlag",
        "comment": "Checks if the provided parameter equals a specific value (0x5b13cc) and returns a boolean result."
    },
    {
        "offset": "0xec4b0",
        "suggestedName": "ret_0xFFFFFFF",
        "comment": "Returns the maximum value for an unsigned 32-bit integer (0xffffffff)."
    },
    {
        "offset": "0xec4b8",
        "suggestedName": "ret_0xFFFFFFF_Alt",
        "comment": "Returns the maximum value for an unsigned 32-bit integer (0xffffffff)."
    },
    {
        "offset": "0xec4c0",
        "suggestedName": "ret_0xFFFFFFF",
        "comment": "Returns the maximum value for an unsigned 32-bit integer (0xffffffff)."
    },
    {
        "offset": "0xecd20",
        "suggestedName": "complexMemoryOperation",
        "comment": "Performs a complex series of operations on memory with multiple unreachable blocks and conditional checks."
    },
    {
        "offset": "0xed258",
        "suggestedName": "iterativeMemoryHandler",
        "comment": "Handles iterative operations on memory, with multiple conditional checks and flag manipulations."
    },
    {
        "offset": "0xee22c",
        "suggestedName": "complexFlagHandler",
        "comment": "Handles complex flag checks and memory operations with multiple iterations."
    },
    {
        "offset": "0xee980",
        "suggestedName": "simply_ret2",
        "comment": "Performs no operation and returns immediately, similar to FUN_000e25b8."
    },
    {
        "offset": "0xeeb40",
        "suggestedName": "setMemoryPointer",
        "comment": "Sets the first pointer to a specific memory location and assigns the second parameter to the next memory position."
    },
    {
        "offset": "0xeedc4",
        "suggestedName": "ret_0",
        "comment": "Returns a fixed value of 0."
    },
    {
        "offset": "0xeedcc",
        "suggestedName": "returnMemoryLocation",
        "comment": "Returns a pointer to a specific memory location (&DAT_0046088d)."
    },
    {
        "offset": "0xef040",
        "suggestedName": "ret_1",
        "comment": "Returns a fixed value of 1, possibly indicating success."
    },
    {
        "offset": "0xef048",
        "suggestedName": "simply_ret",
        "comment": "Performs no operation and returns immediately."
    },
    {
        "offset": "0xef440",
        "suggestedName": "setPointerValue",
        "comment": "Sets the pointer to a specific memory address and returns."
    },
    {
        "offset": "0xef450",
        "suggestedName": "emptyReturn",
        "comment": "Performs no operation and returns immediately."
    },
    {
        "offset": "0xef4c0",
        "suggestedName": "conditionalJumpHandler",
        "comment": "Performs a conditional check and executes an indirect jump based on the condition."
    },
    {
        "offset": "0xef5bc",
        "suggestedName": "conditionalJumpWithParams",
        "comment": "Performs a conditional check on the parameters and executes an indirect jump."
    },
    {
        "offset": "0xf00ac",
        "suggestedName": "ret_2",
        "comment": "Returns a fixed value of 2."
    },
    {
        "offset": "0xf0890",
        "suggestedName": "conditionalMemoryJump",
        "comment": "Checks a memory condition and performs an indirect jump based on the result."
    },
    {
        "offset": "0xf107c",
        "suggestedName": "complexConditionalJump",
        "comment": "Executes a complex conditional check and performs an indirect jump."
    },
    {
        "offset": "0xf1324",
        "suggestedName": "setParamAndJump",
        "comment": "Sets a parameter value and performs an indirect jump based on a condition."
    },
    {
        "offset": "0xf2028",
        "suggestedName": "stateBasedJump",
        "comment": "Performs a conditional check based on state and executes an indirect jump."
    },
    {
        "offset": "0xf221c",
        "suggestedName": "minimalReturn",
        "comment": "Performs no operation and returns immediately."
    },
    {
        "offset": "0xf23a8",
        "suggestedName": "stateBasedConditionalJump",
        "comment": "Performs a state check and executes an indirect jump based on the condition."
    },
    {
        "offset": "0xf25e8",
        "suggestedName": "conditionalJumpWithLong",
        "comment": "Checks a parameter condition and executes an indirect jump based on a long value."
    },
    {
        "offset": "0xf297c",
        "suggestedName": "complexMemoryCheckJump",
        "comment": "Performs a memory condition check and executes an indirect jump based on the result."
    },
    {
        "offset": "0xf2b74",
        "suggestedName": "conditionalMemoryJump",
        "comment": "Checks a memory condition and performs an indirect jump based on the result."
    },
    {
        "offset": "0xf3014",
        "suggestedName": "setPointerValue",
        "comment": "Sets the pointer to a specific memory address and returns."
    },
    {
        "offset": "0xf32e8",
        "suggestedName": "simply_ret",
        "comment": "Performs no operation and returns immediately."
    },
    {
        "offset": "0xf32f0",
        "suggestedName": "simply_ret",
        "comment": "Performs no operation and returns immediately."
    },
    {
        "offset": "0xf32f4",
        "suggestedName": "ret_1",
        "comment": "Returns a fixed value of 1."
    },
    {
        "offset": "0xf3518",
        "suggestedName": "linkedListInsertion",
        "comment": "Performs insertion of a new element in a linked list based on certain conditions."
    },
    {
        "offset": "0xf36cc",
        "suggestedName": "linkedListNodeUpdate",
        "comment": "Updates nodes in a linked list based on certain conditions."
    },
    {
        "offset": "0xf3710",
        "suggestedName": "linkedListNodeUpdate64",
        "comment": "Performs a node update in a linked list using 64-bit references."
    },
    {
        "offset": "0xf393c",
        "suggestedName": "conditionalJumpHandler",
        "comment": "Performs conditional checks and executes an indirect jump based on the result."
    },
    {
        "offset": "0xf4ca8",
        "suggestedName": "simply_ret",
        "comment": "Performs no operation and returns immediately."
    },
    {
        "offset": "0xf4e50",
        "suggestedName": "returnPointerAtOffset68",
        "comment": "Returns the value located at the offset 0x68 from the passed pointer."
    },
    {
        "offset": "0xf4e58",
        "suggestedName": "returnPointerAtOffset70",
        "comment": "Returns the value located at the offset 0x70 from the passed pointer."
    },
    {
        "offset": "0xf4e60",
        "suggestedName": "returnValueAtOffset60",
        "comment": "Returns the 32-bit value located at the offset 0x60 from the passed pointer."
    },
    {
        "offset": "0xf4e78",
        "suggestedName": "returnValueAtOffset78",
        "comment": "Returns the 32-bit value located at the offset 0x78 from the passed pointer."
    },
    {
        "offset": "0xf4e80",
        "suggestedName": "calculateOffsetF8",
        "comment": "Calculates the address by adding 0xf8 to the passed pointer and returns it."
    },
    {
        "offset": "0xf50e4",
        "suggestedName": "findMatchingNodeInList",
        "comment": "Searches for a matching node in the list and returns the value at offset 0x1c."
    },
    {
        "offset": "0xf5178",
        "suggestedName": "conditionalJumpWithParamCheck",
        "comment": "Performs conditional checks on parameters and executes an indirect jump."
    },
    {
        "offset": "0xf5414",
        "suggestedName": "calculateOffset80",
        "comment": "Calculates the address by adding 0x80 to the passed pointer and returns it."
    },
    {
        "offset": "0xf541c",
        "suggestedName": "simply_ret",
        "comment": "Performs no operation and returns immediately."
    },
    {
        "offset": "0xf5568",
        "suggestedName": "conditionalJumpWithMemoryCheck",
        "comment": "Checks a memory condition and performs an indirect jump based on the result."
    },
    {
        "offset": "0xf59f8",
        "suggestedName": "findMatchingNodeWithParams",
        "comment": "Performs an insertion in a linked list based on specific conditions and returns the value."
    },
    {
        "offset": "0xf5bac",
        "suggestedName": "linkedListNodeRearrange",
        "comment": "Rearranges nodes in a linked list based on specific conditions."
    },
    {
        "offset": "0xf5bf0",
        "suggestedName": "linkedListNodeRearrange64",
        "comment": "Rearranges nodes in a linked list with 64-bit references."
    },
    {
        "offset": "0xf5d18",
        "suggestedName": "findMatchingNodeWithList",
        "comment": "Searches for a matching node in the list and returns a value based on conditions."
    },
    {
        "offset": "0xf5f38",
        "suggestedName": "linkedListNodeRearrangeWithParams",
        "comment": "Rearranges nodes in a linked list with the passed parameters."
    },
    {
        "offset": "0xf5f7c",
        "suggestedName": "linkedListNodeRearrangeWithPointers",
        "comment": "Rearranges nodes in a linked list using pointer manipulation."
    },
    {
        "offset": "0xf631c",
        "suggestedName": "linkedListNodeRearrangeWithChecks",
        "comment": "Performs rearranging of linked list nodes with additional checks."
    },
    {
        "offset": "0xf6360",
        "suggestedName": "linkedListNodeRearrange64WithPointers",
        "comment": "Rearranges linked list nodes with 64-bit pointers."
    },
    {
        "offset": "0xf6784",
        "suggestedName": "findMatchingNodeWithChecks",
        "comment": "Finds a matching node in a linked list based on specific checks."
    },
    {
        "offset": "0xf6938",
        "suggestedName": "linkedListNodeRearrange64WithPointerUpdate",
        "comment": "Rearranges nodes with 64-bit pointers and updates references."
    },
    {
        "offset": "0xf697c",
        "suggestedName": "linkedListNodeRearrangeWithPointerCheck",
        "comment": "Rearranges nodes based on pointer condition checks."
    },
    {
        "offset": "0xf69bc",
        "suggestedName": "returnFromArrayAtOffset",
        "comment": "Returns a value from an array at the specified offset based on conditions."
    },
    {
        "offset": "0xf69e8",
        "suggestedName": "setPointerValueAndReturn",
        "comment": "Sets the first parameter as the second and returns."
    },
    {
        "offset": "0xf69f0",
        "suggestedName": "callVtableViaOffset",
        "comment": "This function determines the value of uVar1 based on the value of param_2, then uses it to select an entry from a jump table. The selected function is then called via an indirect jump."
    },
    {
        "offset": "0xf71f0",
        "suggestedName": "callVtableViaOffset",
        "comment": "This function determines the value of uVar1 based on the content of param_1, then uses it to select an entry from a jump table. The selected function is then called via an indirect jump."
    },
    {
        "offset": "0xf73c4",
        "suggestedName": "callVtableViaOffset",
        "comment": "This function sets uVar1 based on the value of param_1, then uses it to select an entry from a jump table. The selected function is then called via an indirect jump."
    },
    {
        "offset": "0xf76c4",
        "suggestedName": "callVtableViaOffset",
        "comment": "This function checks the value of param_1, assigns a value to uVar1 accordingly, and then calls a function from a jump table based on uVar1."
    },
    {
        "offset": "0xf7714",
        "suggestedName": "ret_switch_check_p1",
        "comment": "This function checks the first parameter's value; if it's non-zero, it performs an operation using a value at an offset."
    },
    {
        "offset": "0xf776c",
        "suggestedName": "simply_ret",
        "comment": "This function simply sets the first parameter to zero and returns."
    },
    {
        "offset": "0xf7774",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the value of the first parameter."
    },
    {
        "offset": "0xf7950",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf7a28",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf7bdc",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf7c88",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf7d94",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf7ec4",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf7fdc",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf80ac",
        "suggestedName": "call_vtable_based_on_p33",
        "comment": "This function calls a vtable entry based on the 33rd parameter."
    },
    {
        "offset": "0xf8270",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf83c0",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf8570",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf86ac",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf8790",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf88fc",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf8988",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf8b48",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf8df4",
        "suggestedName": "call_vtable_based_on_p2",
        "comment": "This function calls a vtable entry based on the second parameter's value."
    },
    {
        "offset": "0xf8edc",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf904c",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf915c",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value."
    },
    {
        "offset": "0xf9350",
        "suggestedName": "update_param_with_offset",
        "comment": "This function updates the first parameter based on a calculation involving the value of another parameter."
    },
    {
        "offset": "0xfa60c",
        "suggestedName": "call_vtable_with_advanced_logic",
        "comment": "This function uses advanced logic to determine which vtable entry to call based on the first parameter."
    },
    {
        "offset": "0xfa4e8",
        "suggestedName": "call_vtable_with_condition",
        "comment": "This function calls a vtable entry based on a condition involving the first parameter."
    },
    {
        "offset": "0xfa494",
        "suggestedName": "set_param_to_one",
        "comment": "This function sets the provided parameter to 1."
    },
    {
        "offset": "0xfa294",
        "suggestedName": "call_vtable_using_offset_logic",
        "comment": "This function uses offset logic to call a vtable entry based on the first parameter."
    },
    {
        "offset": "0xfa1d8",
        "suggestedName": "call_vtable_conditional_with_param1",
        "comment": "This function calls a vtable entry based on a conditional involving the first parameter."
    },
    {
        "offset": "0xfa150",
        "suggestedName": "call_vtable_based_on_param_presence",
        "comment": "This function determines the vtable entry to call based on whether the first parameter exists."
    },
    {
        "offset": "0xfa0f4",
        "suggestedName": "call_vtable_conditional_reverse",
        "comment": "This function calls a vtable entry with an offset determined by the reverse condition on the first parameter."
    },
    {
        "offset": "0xf9f1c",
        "suggestedName": "call_vtable_based_on_non_zero_p1",
        "comment": "This function calls a vtable entry based on whether the first parameter is non-zero."
    },
    {
        "offset": "0xf9f10",
        "suggestedName": "set_param_to_negative_one",
        "comment": "This function sets the provided parameter to -1."
    },
    {
        "offset": "0xf9d58",
        "suggestedName": "call_vtable_using_conditional_p1",
        "comment": "This function calls a vtable entry based on a condition involving the first parameter."
    },
    {
        "offset": "0xf9b34",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry using an offset determined by the first parameter's value."
    },
    {
        "offset": "0xfa6f0",
        "suggestedName": "call_vtable_based_on_p1",
        "comment": "This function calls a vtable entry based on the first parameter's value, choosing between two options."
    },
    {
        "offset": "0xfa898",
        "suggestedName": "call_vtable_with_condition",
        "comment": "This function calls a vtable entry based on a condition involving the first parameter."
    },
    {
        "offset": "0xfa958",
        "suggestedName": "call_vtable_conditional_p1",
        "comment": "This function calls a vtable entry based on whether the first parameter is zero or non-zero."
    },
    {
        "offset": "0xfa9dc",
        "suggestedName": "call_vtable_p1_dependent",
        "comment": "This function selects and calls a vtable entry based on the first parameter's state."
    },
    {
        "offset": "0xfab14",
        "suggestedName": "call_vtable_with_advanced_logic",
        "comment": "This function uses advanced logic involving the first parameter to determine which vtable entry to call."
    },
    {
        "offset": "0xfad8c",
        "suggestedName": "call_vtable_based_on_p1_condition",
        "comment": "This function calls a vtable entry based on whether the first parameter is zero or non-zero."
    },
    {
        "offset": "0xfcdb0",
        "suggestedName": "call_vtable_with_p1_logic",
        "comment": "This function calls a vtable entry based on conditional logic involving the first parameter."
    },
    {
        "offset": "0xfce30",
        "suggestedName": "call_vtable_advanced_conditional",
        "comment": "This function uses advanced conditional logic to determine which vtable entry to call based on the first parameter."
    },
    {
        "offset": "0xfcf30",
        "suggestedName": "call_vtable_with_offset_and_p1",
        "comment": "This function determines the vtable entry using offset logic and the first parameter's value."
    },
    {
        "offset": "0xfcfb0",
        "suggestedName": "call_vtable_based_on_presence",
        "comment": "This function calls a vtable entry based on whether the first parameter exists or is non-zero."
    },
    {
        "offset": "0xfd810",
        "suggestedName": "call_vtable_p1_dependent",
        "comment": "This function selects a vtable entry to call based on the first parameter's state."
    },
    {
        "offset": "0xfd978",
        "suggestedName": "call_vtable_with_high_offset_logic",
        "comment": "This function uses high offset values and the first parameter to call a vtable entry."
    },
    {
        "offset": "0xfdb84",
        "suggestedName": "call_vtable_on_p1_existence",
        "comment": "This function calls a vtable entry based on the existence of the first parameter."
    },
    {
        "offset": "0xfdca4",
        "suggestedName": "call_vtable_based_on_condition",
        "comment": "This function selects and calls a vtable entry based on a condition involving the first parameter."
    },
    {
        "offset": "0xfde84",
        "suggestedName": "call_vtable_based_on_p1_status",
        "comment": "This function determines the vtable entry to call based on the status of the first parameter."
    },
    {
        "offset": "0xfe010",
        "suggestedName": "call_vtable_with_complex_logic",
        "comment": "This function uses complex logic involving the first parameter to call a vtable entry."
    },
    {
        "offset": "0xfe4f0",
        "suggestedName": "call_vtable_with_p1_offset",
        "comment": "This function uses the first parameter's offset to determine and call a vtable entry."
    },
    {
        "offset": "0xfe5ec",
        "suggestedName": "call_vtable_with_high_offset_and_logic",
        "comment": "This function calls a vtable entry using a combination of high offset values and logic based on the first parameter."
    },
    {
        "offset": "0xfed8c",
        "suggestedName": "call_vtable_with_status_logic",
        "comment": "This function determines the vtable entry to call based on the first parameter's state and advanced logic."
    },
    {
        "offset": "0xfef10",
        "suggestedName": "call_vtable_with_offset_condition",
        "comment": "This function uses offset-based conditions to determine which vtable entry to call."
    },
    {
        "offset": "0x10064c",
        "suggestedName": "call_vtable_based_on_p1_condition",
        "comment": "This function calls a vtable entry based on the value of the first parameter."
    },
    {
        "offset": "0x10083c",
        "suggestedName": "call_vtable_based_on_param_condition",
        "comment": "This function selects and calls a vtable entry based on a condition involving the second parameter."
    },
    {
        "offset": "0x100c24",
        "suggestedName": "call_vtable_based_on_p1_state",
        "comment": "This function calls a vtable entry based on the first parameter's state."
    },
    {
        "offset": "0x100d1c",
        "suggestedName": "call_vtable_based_on_p1_pointer",
        "comment": "This function selects a vtable entry based on a pointer value in the first parameter."
    },
    {
        "offset": "0x100db8",
        "suggestedName": "call_vtable_based_on_p1_condition_switch",
        "comment": "This function calls a vtable entry based on a condition determined by the first parameter."
    },
    {
        "offset": "0x100fd8",
        "suggestedName": "set_boolean_based_on_p1",
        "comment": "This function sets a boolean value based on the first parameter."
    },
    {
        "offset": "0x100fec",
        "suggestedName": "assign_p1_based_on_offset",
        "comment": "This function updates the first parameter based on the content of a nearby memory address."
    },
    {
        "offset": "0x1010e0",
        "suggestedName": "call_vtable_with_conditional_jump",
        "comment": "This function calls a vtable entry based on the first parameter's value and a conditional jump."
    },
    {
        "offset": "0x1013e4",
        "suggestedName": "call_vtable_based_on_p1_and_condition",
        "comment": "This function calls a vtable entry based on the first parameter's value and additional conditions."
    },
    {
        "offset": "0x10157c",
        "suggestedName": "call_vtable_based_on_p1_logic",
        "comment": "This function calls a vtable entry based on the logic involving the first parameter."
    },
    {
        "offset": "0x1016e8",
        "suggestedName": "call_vtable_based_on_p1_and_p2",
        "comment": "This function selects a vtable entry to call based on the state of the first parameter."
    },
    {
        "offset": "0x101844",
        "suggestedName": "call_vtable_with_p1_offset",
        "comment": "This function calls a vtable entry based on the first parameter's offset value."
    },
    {
        "offset": "0x101868",
        "suggestedName": "call_vtable_with_p1_based_jump",
        "comment": "This function calls a vtable entry based on the first parameter's value and a conditional jump."
    },
    {
        "offset": "0x101938",
        "suggestedName": "divide_p1_by_p2",
        "comment": "This function divides the first parameter by the second, and stores the result back in the first parameter."
    },
    {
        "offset": "0x101950",
        "suggestedName": "divide_ulong_p1_by_p2",
        "comment": "This function divides the first unsigned long parameter by the second and stores the result."
    },
    {
        "offset": "0x10198c",
        "suggestedName": "modulo_p1_by_p2",
        "comment": "This function calculates the remainder when the first parameter is divided by the second."
    },
    {
        "offset": "0x1019a8",
        "suggestedName": "modulo_ulong_p1_by_p2",
        "comment": "This function calculates the remainder when the first unsigned long parameter is divided by the second."
    },
    {
        "offset": "0x1019bc",
        "suggestedName": "modulo_uint_p1_by_p2",
        "comment": "This function calculates the remainder when the first unsigned integer parameter is divided by the second."
    },
    {
        "offset": "0x1019d4",
        "suggestedName": "add_double_p1_and_p2",
        "comment": "This function adds the first and second double parameters and stores the result in the first parameter."
    },
    {
        "offset": "0x1019e4",
        "suggestedName": "subtract_double_p1_and_p2",
        "comment": "This function subtracts the second double parameter from the first and stores the result in the first parameter."
    },
    {
        "offset": "0x1019f4",
        "suggestedName": "multiply_double_p1_and_p2",
        "comment": "This function multiplies the first and second double parameters and stores the result in the first parameter."
    },
    {
        "offset": "0x101a04",
        "suggestedName": "divide_double_p1_by_p2",
        "comment": "This function divides the first double parameter by the second and stores the result in the first parameter."
    },
    {
        "offset": "0x101a14",
        "suggestedName": "update_double_p1_with_sum",
        "comment": "This function updates the first parameter based on the sum of the first and second parameters, maintaining a specific bit mask."
    },
    {
        "offset": "0x101a44",
        "suggestedName": "update_double_p1_with_difference",
        "comment": "This function updates the first parameter based on the difference between the first and second parameters, maintaining a bit mask."
    },
    {
        "offset": "0x101a74",
        "suggestedName": "update_double_p1_with_product",
        "comment": "This function updates the first parameter based on the product of the first and second parameters."
    },
    {
        "offset": "0x101aa4",
        "suggestedName": "update_double_p1_with_quotient",
        "comment": "This function updates the first parameter based on the quotient of the first parameter divided by the second."
    },
    {
        "offset": "0x101ad4",
        "suggestedName": "compare_and_set_double_p1",
        "comment": "This function compares the first and third parameters, and sets the first parameter to a boolean value based on the comparison."
    },
    {
        "offset": "0x101aec",
        "suggestedName": "compare_and_set_float_p1",
        "comment": "This function compares the first and third float parameters, and sets the first parameter to a boolean value based on the comparison."
    },
    {
        "offset": "0x101b04",
        "suggestedName": "compare_and_set_float_p1_based_on_condition",
        "comment": "This function compares the first and third float parameters and sets the first parameter based on the comparison."
    },
    {
        "offset": "0x101b20",
        "suggestedName": "compare_and_set_float_p1_on_less_than",
        "comment": "This function compares the first and third float parameters and sets the first parameter based on whether the first is less than the third."
    },
    {
        "offset": "0x101b3c",
        "suggestedName": "compare_and_set_float_p1_based_on_less_than",
        "comment": "This function compares the first and third float parameters, setting the first parameter based on whether the first is less than the third."
    },
    {
        "offset": "0x101b58",
        "suggestedName": "compare_and_set_float_p1_based_on_equal",
        "comment": "This function compares the first and third float parameters and sets the first parameter to true if they are equal."
    },
    {
        "offset": "0x101b74",
        "suggestedName": "compare_and_set_double_p1_based_on_difference",
        "comment": "This function compares the first and second double parameters and sets the first parameter accordingly."
    },
    {
        "offset": "0x101b88",
        "suggestedName": "compare_and_set_double_p1_based_on_equality",
        "comment": "This function compares the first and second double parameters, setting the first parameter to true if they are equal."
    },
    {
        "offset": "0x101b9c",
        "suggestedName": "set_double_p1_based_on_comparison",
        "comment": "This function compares the first and second double parameters, setting the first parameter to a specific value based on the comparison."
    },
    {
        "offset": "0x101bb4",
        "suggestedName": "set_double_p1_based_on_less_than_comparison",
        "comment": "This function compares the first and second double parameters, setting the first parameter to a specific value based on the less-than comparison."
    },
    {
        "offset": "0x101bcc",
        "suggestedName": "set_double_p1_based_on_less_than",
        "comment": "This function sets the first parameter to a specific value if the second double parameter is less than the first."
    },
    {
        "offset": "0x101be4",
        "suggestedName": "set_double_p1_based_on_equality",
        "comment": "This function sets the first parameter based on whether the second double parameter is equal to the first."
    },
    {
        "offset": "0x101bfc",
        "suggestedName": "convert_float_to_double",
        "comment": "This function converts a float to double and updates the first parameter with the converted value."
    },
    {
        "offset": "0x101c0c",
        "suggestedName": "update_double_p1_with_float_value",
        "comment": "This function updates the first parameter with a value derived from a float, maintaining a specific bit mask."
    },
    {
        "offset": "0x101c38",
        "suggestedName": "convert_float_to_long",
        "comment": "This function converts the first float parameter into a long and stores the result."
    },
    {
        "offset": "0x101c4c",
        "suggestedName": "convert_double_to_long",
        "comment": "This function converts the first double parameter into a long and stores the result."
    },
    {
        "offset": "0x101c60",
        "suggestedName": "convert_float_to_long_for_p1",
        "comment": "This function converts the first float parameter into a long and updates the first parameter."
    },
    {
        "offset": "0x101c70",
        "suggestedName": "convert_double_to_long",
        "comment": "This function converts the double parameter to a long integer and stores the result in the first parameter."
    },
    {
        "offset": "0x101c80",
        "suggestedName": "convert_float_to_ulong",
        "comment": "This function converts the first float parameter to an unsigned long and stores it in the first parameter."
    },
    {
        "offset": "0x101c90",
        "suggestedName": "convert_double_to_ulong_from_float",
        "comment": "This function converts the first float parameter to an unsigned long and stores it as a double in the first parameter."
    },
    {
        "offset": "0x101ca0",
        "suggestedName": "convert_float_to_long",
        "comment": "This function converts the first float parameter to a long and stores the result in the first parameter."
    },
    {
        "offset": "0x101cb0",
        "suggestedName": "convert_double_to_long_from_float",
        "comment": "This function converts the first float parameter to a long and stores it as a double in the first parameter."
    },
    {
        "offset": "0x101cc0",
        "suggestedName": "convert_double_to_int_from_param",
        "comment": "This function converts the first double parameter to an integer and stores it as a double."
    },
    {
        "offset": "0x101cd0",
        "suggestedName": "convert_float_to_ulong_from_double",
        "comment": "This function updates the first parameter by converting the first float parameter to an unsigned long, while maintaining a specific bitmask."
    },
    {
        "offset": "0x101cf8",
        "suggestedName": "convert_double_to_long_from_param",
        "comment": "This function converts the first double parameter to a long and stores it back into the first parameter."
    },
    {
        "offset": "0x101d08",
        "suggestedName": "convert_float_to_long_from_double",
        "comment": "This function converts the first long parameter to a float and stores it as an unsigned long, applying a bitmask."
    },
    {
        "offset": "0x101d30",
        "suggestedName": "convert_uint_to_double",
        "comment": "This function converts an unsigned integer parameter to a double using NEON_ucvtf."
    },
    {
        "offset": "0x101d40",
        "suggestedName": "convert_ulong_to_float_with_bitmask",
        "comment": "This function converts a long parameter to a float while applying a bitmask."
    },
    {
        "offset": "0x101d68",
        "suggestedName": "convert_undefined8_to_double",
        "comment": "This function converts the value in the undefined8 parameter to a double."
    },
    {
        "offset": "0x101d78",
        "suggestedName": "convert_ulong_to_float",
        "comment": "This function converts an unsigned long parameter to a float and stores it back."
    },
    {
        "offset": "0x101da0",
        "suggestedName": "call_vtable_based_on_flag",
        "comment": "This function calls a specific vtable entry based on a conditional check of a data value."
    },
    {
        "offset": "0x1022a4",
        "suggestedName": "call_vtable_based_on_param1_condition",
        "comment": "This function calls a vtable entry based on the condition of the first parameter."
    },
    {
        "offset": "0x1024c8",
        "suggestedName": "process_param_with_jump_conditions",
        "comment": "This function processes parameters with conditions, updating jump targets and checking values."
    },
    {
        "offset": "0x10281c",
        "suggestedName": "link_param2_to_param1",
        "comment": "This function links the second parameter to the first by traversing a linked list structure."
    },
    {
        "offset": "0x1029d0",
        "suggestedName": "link_param2_to_param1_with_condition",
        "comment": "This function links the second parameter to the first, with conditional logic to check specific conditions."
    },
    {
        "offset": "0x102a14",
        "suggestedName": "link_param2_to_param1_with_additional_pointer",
        "comment": "This function links the second parameter to the first, with additional pointer adjustments."
    },
    {
        "offset": "0x102f6c",
        "suggestedName": "link_param2_with_updated_condition",
        "comment": "This function links the second parameter to the first, with updated conditions on the linked list."
    },
    {
        "offset": "0x102fb0",
        "suggestedName": "link_param2_to_param1_with_pointers",
        "comment": "This function links the second parameter to the first, adjusting pointers accordingly."
    },
    {
        "offset": "0x103140",
        "suggestedName": "process_linked_param2_with_conditions",
        "comment": "This function processes the second parameter in a linked list structure with specific conditions."
    },
    {
        "offset": "0x1032f4",
        "suggestedName": "link_param2_with_pointer_adjustments",
        "comment": "This function links the second parameter to the first, making pointer adjustments and managing linked list traversal."
    },
    {
        "offset": "0x103338",
        "suggestedName": "link_param2_with_pointer_rearrangements",
        "comment": "This function manages linking the second parameter with the first, while rearranging pointer values."
    },
    {
        "offset": "0x104d74",
        "suggestedName": "call_vtable_based_on_pointer_check",
        "comment": "This function checks a pointer condition and calls a specific vtable entry based on the result."
    },
    {
        "offset": "0x1051d4",
        "suggestedName": "check_param2_value_and_return",
        "comment": "This function checks the value of the second parameter and returns a corresponding value based on the check."
    },
    {
        "offset": "0x105304",
        "suggestedName": "return_function_for_vtable",
        "comment": "This function returns a pointer to another function, typically used for indirect calls in a vtable."
    },
    {
        "offset": "0x1055b4",
        "suggestedName": "link_param2_with_vtable_check",
        "comment": "This function links the second parameter with the first, with checks based on a vtable structure."
    },
    {
        "offset": "0x105768",
        "suggestedName": "link_param2_with_pointer_updates",
        "comment": "This function links the second parameter with the first and updates the pointer fields accordingly."
    },
    {
        "offset": "0x1057ac",
        "suggestedName": "link_param2_with_pointer_changes",
        "comment": "This function manages the linking of parameters and adjusts pointer values as necessary."
    },
    {
        "offset": "0x1058a8",
        "suggestedName": "link_param2_with_pointer_adjustments_based_on_condition",
        "comment": "This function links the second parameter with the first, adjusting pointers based on conditional checks."
    },
    {
        "offset": "0x105a5c",
        "suggestedName": "link_param2_with_pointer_rearrangements",
        "comment": "This function links the second parameter with the first while making rearrangements in the pointer chain."
    },
    {
        "offset": "0x105aa0",
        "suggestedName": "link_param2_with_pointer_updates_based_on_conditions",
        "comment": "This function links the second parameter to the first, with pointer updates based on specific conditions."
    },
    {
        "offset": "0x105b60",
        "suggestedName": "call_vtable_based_on_pointer_check",
        "comment": "This function checks pointer values and selects a vtable entry to call based on the result."
    },
    {
        "offset": "0x106188",
        "suggestedName": "call_vtable_based_on_first_param_check",
        "comment": "This function calls a vtable entry based on a condition related to the first parameter."
    },
    {
        "offset": "0x106560",
        "suggestedName": "link_param2_with_pointer_conditions",
        "comment": "This function links the second parameter with the first, making conditional adjustments to pointers."
    },
    {
        "offset": "0x106714",
        "suggestedName": "link_param2_with_pointer_checks",
        "comment": "This function links the second parameter to the first with pointer checks to validate the link."
    },
    {
        "offset": "0x106758",
        "suggestedName": "link_param2_with_pointer_rearrangements",
        "comment": "This function links the second parameter to the first, ensuring proper pointer rearrangement."
    },
    {
        "offset": "0x107010",
        "suggestedName": "link_param2_with_pointer_updates",
        "comment": "This function links the second parameter to the first and updates the pointers."
    },
    {
        "offset": "0x43d9c8",
        "suggestedName": "return_constant_value_1",
        "comment": "This function simply returns a constant value of 1. Likely used as a placeholder or a trivial check within the anti-cheat system."
    },
    {
        "offset": "0x43d9d0",
        "suggestedName": "return_constant_value_1",
        "comment": "This function also returns a constant value of 1. Similar to the previous function, it may serve a trivial or check-based role in the system."
    },
    {
        "offset": "0x43d9d8",
        "suggestedName": "call_indirect_jump_based_on_param1",
        "comment": "This function performs an indirect jump via a function pointer, determined by a value stored in `param_1`. This could be used for dynamic function resolution or dispatching function calls based on runtime conditions."
    },
    {
        "offset": "0x43db04",
        "suggestedName": "conditional_jump_with_char_check",
        "comment": "The function reads a byte value from a structure, checks if it matches a specific value ('\\x02'), and then makes an indirect function call. If the byte doesn't match, it returns a boolean result based on the byte's value. This could be part of a verification mechanism in the anti-cheat system to check for specific conditions before proceeding."
    },
    {
        "offset": "0x43ddb0",
        "suggestedName": "conditional_jump_with_char_check",
        "comment": "Similar to the previous function, this function checks the byte at a specific memory location and makes a jump based on its value, returning a boolean result in case of failure. This could be used to validate conditions or states in the game environment, relevant for anti-cheat systems."
    },
    {
        "offset": "0x43e0d4",
        "suggestedName": "conditional_jump_with_char_check",
        "comment": "This function also checks a byte value and performs an indirect jump based on it. This is likely used for enforcing state checks or validating conditions in the game's memory for anti-cheat purposes."
    },
    {
        "offset": "0x43e474",
        "suggestedName": "decode_variable_length_data",
        "comment": "This function decodes variable-length data stored in a byte array and stores the result in `param_2`. The function likely handles some form of encoded or compressed data used in the game, such as player or game state data, which could be relevant for anti-cheat validation."
    },
    {
        "offset": "0x43e49c",
        "suggestedName": "decode_variable_length_data_with_sign_extension",
        "comment": "This function is similar to the previous one but includes additional handling for signed data. It decodes a byte array and applies a sign extension when necessary. This may be used to decode complex data formats within the game, where signed values are involved, which could relate to anti-cheat data integrity checks."
    },
    {
        "offset": "0x43e5cc",
        "suggestedName": "initialize_data_values",
        "comment": "This function initializes a series of data values in memory to a constant value (8). It might be used for setting up a certain state or buffer in the game that is checked during gameplay to ensure consistency and prevent tampering."
    },
    {
        "offset": "0x43e880",
        "suggestedName": "get_value_from_param1_offset_0x310",
        "comment": "This function retrieves a value from a specific offset (`0x310`) of `param_1`. It could be used to access specific game state data or configurations stored in a structure or object in memory, which might be checked for integrity in the anti-cheat system."
    },
    {
        "offset": "0x43e8e0",
        "suggestedName": "get_value_from_param1_offset_0x318",
        "comment": "This function retrieves a value from the offset `0x318` of `param_1`. Like the previous function, this could be used for accessing game state information, which is relevant for anti-cheat detection, ensuring no unauthorized modifications."
    },
    {
        "offset": "0x43e8e8",
        "suggestedName": "get_value_from_param1_and_set_param2",
        "comment": "This function retrieves a value from `param_1` at the offset `0x318` and performs some bitwise operation to set the value in `param_2`. This could be related to game state validation, where specific memory values are checked and modified for anti-cheat purposes."
    },
    {
        "offset": "0x43e8fc",
        "suggestedName": "set_param1_offset_0x318",
        "comment": "This function sets a value at offset `0x318` in the structure or object pointed to by `param_1`. This could be used for modifying game state or configuration, potentially involved in protecting against cheating by ensuring proper state updates."
    },
    {
        "offset": "0x43e904",
        "suggestedName": "get_value_from_param1_offset_800",
        "comment": "This function retrieves a value from offset `0x800` in `param_1`, possibly related to a game object or configuration value. This could be used for accessing critical game state information for validation, crucial in anti-cheat checks."
    },
    {
        "offset": "0x43e90c",
        "suggestedName": "get_value_from_param1_offset_0x338",
        "comment": "This function retrieves a value from offset `0x338` in `param_1`. Similar to the previous functions, it likely retrieves a specific game-related value for state validation and anti-cheat purposes."
    },
    {
        "offset": "0x43e93c",
        "suggestedName": "get_value_from_param1_offset_0x330",
        "comment": "This function retrieves a value from offset `0x330` in `param_1`. It could be used for accessing and validating specific game state data, relevant for anti-cheat measures."
    },
    {
        "offset": "0x43e944",
        "suggestedName": "get_value_from_param1_offset_0x328",
        "comment": "This function retrieves a value from offset `0x328` in `param_1`, which could be used to access critical data for game state verification, making it important in an anti-cheat context."
    },
    {
        "offset": "0x43fe68",
        "suggestedName": "noop_function",
        "comment": "This function does nothing and simply returns. It may be a placeholder or part of a no-op functionality in the anti-cheat system."
    },
    {
        "offset": "0x4403c0",
        "suggestedName": "decode_variable_length_data",
        "comment": "This function decodes a variable-length data stream, similar to previous decode functions. It might be used in an anti-cheat system to validate or decode compressed or encoded game data."
    },
    {
        "offset": "0x4403e8",
        "suggestedName": "decode_variable_length_data_with_sign_extension",
        "comment": "Like the previous function, this decodes a byte array with additional sign extension handling. It might be used for dealing with complex encoded data formats in the game, ensuring integrity and preventing data tampering."
    },
    {
        "offset": "0x440428",
        "suggestedName": "compare_memory_values",
        "comment": "This function compares values from two memory locations and returns a comparison result. It might be used in the anti-cheat system to compare game state data or player information for any modifications."
    },
    {
        "offset": "0x44f1b0",
        "suggestedName": "handle_bad_instruction_data",
        "comment": "This function appears to handle bad or corrupted instruction data. It may be part of a crash handling mechanism or part of the anti-cheat system to deal with invalid or malicious instructions detected during runtime."
    },
    {
        "offset": "0x44f4c0",
        "suggestedName": "handle_bad_instruction_data",
        "comment": "Similar to the previous function, this deals with invalid instruction data and could be part of error handling for suspicious or invalid operations detected by the anti-cheat system."
    },
    {
        "offset": "0x481dd8",
        "suggestedName": "handle_bad_instruction_data",
        "comment": "This function also handles bad instruction data, likely part of a defense mechanism in the anti-cheat system to address unexpected or invalid code execution."
    },
    {
        "offset": "0x53c3f4",
        "suggestedName": "exclusive_monitor_check",
        "comment": "This function performs an exclusive monitor check, possibly to ensure that no unauthorized access to critical game resources or memory occurs. It could be part of the anti-cheat system's resource management functionality."
    },
    {
        "offset": "0x00430d70",
        "suggestedName": "validateByteSequence",
        "comment": "This function processes a byte stream, validating specific patterns and numeric sequences. It returns 1 for invalid sequences or 0 when specific conditions are met."
    },
    {
        "offset": "0x00430ff8",
        "suggestedName": "simplyReturnZero",
        "comment": "A placeholder or no-op function that always returns 0. May serve as a decoy or filler in the anti-cheat system."
    },
    {
        "offset": "0x00431000",
        "suggestedName": "simplyReturnZero",
        "comment": "A placeholder or no-op function that always returns 0. May serve as a decoy or filler in the anti-cheat system."
    },
    {
        "offset": "0x00431008",
        "suggestedName": "simplyReturnZero",
        "comment": "A placeholder or no-op function that always returns 0. May serve as a decoy or filler in the anti-cheat system."
    },
    {
        "offset": "0x107054",
        "suggestedName": "updateBinaryTreeLinks",
        "comment": "This function updates the links between nodes in a binary tree-like structure. It adjusts pointers to ensure the tree's integrity after a modification, like insertion or deletion."
    },
    {
        "offset": "0x107158",
        "suggestedName": "insertOrCompareTreeNode",
        "comment": "This function inserts a new node into a binary tree or checks if an equivalent node already exists. It ensures tree properties are maintained."
    },
    {
        "offset": "0x10730c",
        "suggestedName": "returnDataReference",
        "comment": "This function returns a reference to a specific constant data address, likely for configuration or predefined constants."
    },
    {
        "offset": "0x107318",
        "suggestedName": "returnPredefinedValue",
        "comment": "This function returns a predefined constant value, possibly used as a flag or identifier."
    },
    {
        "offset": "0x1073b4",
        "suggestedName": "dispatchFunctionBasedOnFlag",
        "comment": "This function dispatches execution to different code paths based on a flag's value. It uses an indirect jump table for efficiency."
    },
    {
        "offset": "0x1076f8",
        "suggestedName": "conditionalDispatcher",
        "comment": "This function selects and calls a specific handler function based on the value of a condition or flag. It uses a jump table for redirection."
    },
    {
        "offset": "0x107778",
        "suggestedName": "getNodeState",
        "comment": "This function retrieves a state or attribute associated with a node, stored at a specific offset."
    },
    {
        "offset": "0x107780",
        "suggestedName": "getNodeAttribute",
        "comment": "This function returns a specific attribute or flag for a node, useful for state checking."
    },
    {
        "offset": "0x107d20",
        "suggestedName": "combineFlagsAndDispatch",
        "comment": "This function combines a set of flags and determines the appropriate function to call based on the result."
    },
    {
        "offset": "0x108278",
        "suggestedName": "validateNodeAndDispatch",
        "comment": "This function validates the state of a node and dispatches control to the relevant handler function. It employs a jump table for execution redirection."
    },
    {
        "offset": "0x108554",
        "suggestedName": "conditionalHandler",
        "comment": "This function selects and calls a handler function based on the state of a global flag, leveraging a jump table for redirection."
    },
    {
        "offset": "0x108938",
        "suggestedName": "dispatchBasedOnParameter",
        "comment": "This function selects a function to call from a jump table based on a parameter value, optimizing control flow."
    },
    {
        "offset": "0x108fa4",
        "suggestedName": "dispatchOnCondition",
        "comment": "This function determines which function to invoke from a table based on a conditional parameter, enabling efficient branching."
    },
    {
        "offset": "0x109510",
        "suggestedName": "handleParametricBranch",
        "comment": "This function uses a parameter to decide which branch to execute, dispatching through a jump table for modularity."
    },
    {
        "offset": "0x1096b0",
        "suggestedName": "dispatchComplexCondition",
        "comment": "This function evaluates a complex condition involving multiple parameters and selects the appropriate handler function from a jump table."
    },
    {
        "offset": "0x10992c",
        "suggestedName": "dispatchFlagsWithFallback",
        "comment": "This function evaluates a parameter and selects a function to execute from a jump table, providing a fallback mechanism."
    },
    {
        "offset": "0x109bf4",
        "suggestedName": "incrementGlobalCounter",
        "comment": "This function increments a global counter variable, likely used for tracking occurrences or iterations."
    },
    {
        "offset": "0x109ecc",
        "suggestedName": "branchOnParameterComparison",
        "comment": "This function compares a parameter with a threshold and redirects execution based on the result."
    },
    {
        "offset": "0x10a168",
        "suggestedName": "dispatchOnBoolean",
        "comment": "This function calls one of two handlers based on a boolean parameter, enabling simple condition-based branching."
    },
    {
        "offset": "0x10a1e0",
        "suggestedName": "dispatchConditionalLogic",
        "comment": "This function evaluates a condition and selects a handler function from a table, facilitating flexible control flow."
    },
    {
        "offset": "0x118be8",
        "suggestedName": "conditionalJumpBasedOnFlag1",
        "comment": "This function uses a condition based on the value stored at a specific memory offset to choose between two possible code paths. The function dispatches to different functions based on this condition."
    },
    {
        "offset": "0x118d24",
        "suggestedName": "conditionalJumpBasedOnFlag2",
        "comment": "Similar to the previous function, this one decides which function to call based on the value at a certain memory offset, using a jump table for dynamic function selection."
    },
    {
        "offset": "0x118ff4",
        "suggestedName": "conditionalJumpBasedOnFlag3",
        "comment": "This function makes a decision based on a condition tied to a specific memory value, choosing between two branches and executing corresponding functions based on the condition."
    },
    {
        "offset": "0x119080",
        "suggestedName": "conditionalJumpBasedOnFlag4",
        "comment": "This function conditionally selects a function to call, based on the evaluation of a specific memory value, and dispatches to a jump table for function invocation."
    },
    {
        "offset": "0x119bb4",
        "suggestedName": "conditionalJumpBasedOnFlag5",
        "comment": "The function evaluates a specific condition and, based on the outcome, selects a function to call from an indirect jump table."
    },
    {
        "offset": "0x119cfc",
        "suggestedName": "returnConstantValue1",
        "comment": "This function returns a constant value, typically used for status codes or flags in game logic."
    },
    {
        "offset": "0x11a144",
        "suggestedName": "setValueOnCondition",
        "comment": "This function sets a value at a specific memory location if a condition (based on parameters) holds true, ensuring synchronization between different game components."
    },
    {
        "offset": "0x11a508",
        "suggestedName": "conditionalJumpBasedOnGlobalFlag",
        "comment": "This function selects and dispatches execution based on the value of a global flag, using a jump table for function calls."
    },
    {
        "offset": "0x11ad28",
        "suggestedName": "checkConditionForValue",
        "comment": "This function checks if a given value matches a predefined condition and returns a boolean result, typically used for validation or checks in the game."
    },
    {
        "offset": "0x11ad38",
        "suggestedName": "conditionalJumpBasedOnFlag6",
        "comment": "Similar to other conditional jump functions, this one checks a memory offset for a specific flag and uses that to choose which function to call from a jump table."
    },
    {
        "offset": "0x11aeac",
        "suggestedName": "conditionalJumpBasedOnFlag7",
        "comment": "This function evaluates a condition based on a memory value and selects between two function calls using an indirect jump mechanism."
    },
    {
        "offset": "0x11b0b0",
        "suggestedName": "dispatchOnConditionalCheck",
        "comment": "This function dispatches execution to one of two functions based on the evaluation of a condition in the game, likely used to manage game state transitions."
    },
    {
        "offset": "0x11b3a4",
        "suggestedName": "conditionalJumpBasedOnState1",
        "comment": "This function chooses one of two execution paths based on a global flag, dispatching to the corresponding function from an indirect jump table."
    },
    {
        "offset": "0x11b5ec",
        "suggestedName": "conditionalJumpBasedOnState2",
        "comment": "This function works similarly to the previous one, checking a flag and deciding which handler function to call depending on the game state."
    },
    {
        "offset": "0x11b6b0",
        "suggestedName": "conditionalJumpBasedOnState3",
        "comment": "This function checks a flag and dispatches control to different functions accordingly, enabling flexible game logic management."
    },
    {
        "offset": "0x11b794",
        "suggestedName": "conditionalJumpBasedOnParam1",
        "comment": "This function conditionally jumps to different handlers based on a parameter value, adjusting the game flow according to specific criteria."
    },
    {
        "offset": "0x11baac",
        "suggestedName": "setPointerAndFlag",
        "comment": "This function sets a pointer and a flag value, potentially used for managing game states or interactions between different modules."
    },
    {
        "offset": "0x11babc",
        "suggestedName": "clearPointerFlag",
        "comment": "This function clears a pointer by setting it to zero, likely used to reset game states or clean up after certain operations."
    },
    {
        "offset": "0x11c018",
        "suggestedName": "conditionalJumpBasedOnValue",
        "comment": "This function selects a handler function based on the value of a memory location, dispatching execution through a jump table for efficient control flow."
    },
    {
        "offset": "0x11c32c",
        "suggestedName": "conditionalJumpBasedOnGlobalFlag2",
        "comment": "This function checks a global flag and selects between two different functions to call, using an indirect jump table for execution redirection."
    },
    {
        "offset": "0x11c3f8",
        "suggestedName": "conditionalJumpBasedOnGlobalFlag3",
        "comment": "This function uses a global flag to choose between different game state handlers, employing a jump table for dynamic function dispatch."
    },
    {
        "offset": "0x11cecc",
        "suggestedName": "setFlagInMemory",
        "comment": "This function sets a specific flag in memory at a given offset, used for controlling state or actions in the game."
    },
    {
        "offset": "0x11ced8",
        "suggestedName": "checkFlagInMemory",
        "comment": "This function checks if a flag in memory is set to a specific value, returning a boolean result, often used for validation or state tracking."
    },
    {
        "offset": "0x11f6a0",
        "suggestedName": "conditionalDispatchBasedOnBit",
        "comment": "This function dispatches execution based on a bit in a parameter, choosing between different functions according to a condition involving bitwise operations."
    },
    {
        "offset": "0x11f950",
        "suggestedName": "conditionalJumpWithGlobalFlag",
        "comment": "This function selects and dispatches execution based on a global flag, adjusting the game flow with conditional logic."
    },
    {
        "offset": "0x12007c",
        "suggestedName": "initializeAndReturnStatus",
        "comment": "This function initializes values and returns a status code, typically used for setup or configuration purposes in the game."
    },
    {
        "offset": "0x12252c",
        "suggestedName": "validateInputAndDispatch",
        "comment": "This function validates an input against a condition and dispatches execution to different functions based on the validation result."
    },
    {
        "offset": "0x122ad8",
        "suggestedName": "dispatchOnInputCondition",
        "comment": "This function checks if an input condition holds true and dispatches execution to different functions based on the result, using a jump table for efficiency."
    },
    {
        "offset": "0x123760",
        "suggestedName": "simpleReturn",
        "comment": "This function simply returns, likely serving as a placeholder or a no-op function in the game code."
    },
    {
        "offset": "0x123798",
        "suggestedName": "conditionalDispatchOnInput",
        "comment": "This function evaluates an input value and dispatches execution to the appropriate function, adjusting behavior based on the input received."
    },
    {
        "offset": "0x123818",
        "suggestedName": "conditionalDispatchOnAnotherInput",
        "comment": "This function works similarly to the previous one, dispatching control to different functions based on an input value, allowing flexible game logic."
    },
    {
        "offset": "0x1160fc",
        "suggestedName": "callJumptableWithCondition",
        "comment": "This function checks if the input is greater than or equal to 0 and calls a function from a jumptable located at DAT_005561d0. The function behaves differently based on the input."
    },
    {
        "offset": "0x116cbc",
        "suggestedName": "callJumptableBasedOnParam2",
        "comment": "This function checks the value of the second parameter and uses it to select a function from a jumptable located at 0x556300."
    },
    {
        "offset": "0x116e6c",
        "suggestedName": "initializeParams",
        "comment": "This function initializes the provided parameter array by setting various memory locations to predefined values, including a reference to DAT_00548828, a constant."
    },
    {
        "offset": "0x116e80",
        "suggestedName": "resetMemoryLocation",
        "comment": "This function sets the value at the memory location (param_1 + 0x10) to zero, effectively resetting it."
    },
    {
        "offset": "0x1178cc",
        "suggestedName": "callJumptableBasedOnParam2",
        "comment": "This function checks the second parameter and calls a function from a jumptable located at 0x556370. The behavior is dependent on the parameter value."
    },
    {
        "offset": "0x117aac",
        "suggestedName": "bitwiseOperationCheck",
        "comment": "This function performs bitwise operations on the parameters and checks specific conditions, returning 0 or 1 based on the result."
    },
    {
        "offset": "0x117bc0",
        "suggestedName": "callJumptableBasedOnConstant",
        "comment": "This function uses the value of a constant (DAT_005b15c8) to determine which function to call from a jumptable located at 0x5563b0."
    },
    {
        "offset": "0x117f5c",
        "suggestedName": "returnMemoryValue",
        "comment": "This function returns the value stored at the memory location (param_1 + 0x78)."
    },
    {
        "offset": "0x1189b0",
        "suggestedName": "extractDataFromMemory",
        "comment": "This function extracts a value from memory and applies a NEON reverse operation (NEON_rev64) to it, storing the result in the provided parameter."
    },
    {
        "offset": "0x123c94",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x12429c",
        "suggestedName": "callJumptableWithCondition",
        "comment": "This function checks the value stored at (param_1 + 0x130) and selects a function to call from a jumptable located at 0x005582b0, based on the result."
    },
    {
        "offset": "0x1245c4",
        "suggestedName": "callJumptableWithBitwiseCheck",
        "comment": "This function checks the second parameter's bitwise value and selects a function from a jumptable located at 0x00558330 based on the result."
    },
    {
        "offset": "0x124a88",
        "suggestedName": "callJumptableBasedOnCharCondition",
        "comment": "This function checks the value at (param_1 + 0x122) and calls a function from a jumptable located at 0x00558360 based on this value."
    },
    {
        "offset": "0x12512c",
        "suggestedName": "callJumptableBasedOnPointer",
        "comment": "This function checks the value of the pointer (*param_2) and calls a function from a jumptable located at 0x558490 based on the condition."
    },
    {
        "offset": "0x125928",
        "suggestedName": "returnMemoryValue",
        "comment": "This function returns the value stored at the memory location (param_1 + 0x154)."
    },
    {
        "offset": "0x125930",
        "suggestedName": "returnMemoryValue",
        "comment": "This function returns the value stored at the memory location (param_1 + 0xe4)."
    },
    {
        "offset": "0x125938",
        "suggestedName": "callJumptableWithParam2",
        "comment": "This function uses the second parameter to select a function to call from a jumptable located at 0x005585b0, with the call dependent on a bit-shifted value."
    },
    {
        "offset": "0x1259c4",
        "suggestedName": "callJumptableWithCondition",
        "comment": "This function checks the second parameter and selects a function to call from a jumptable located at 0x005585d0."
    },
    {
        "offset": "0x1262d8",
        "suggestedName": "callJumptableBasedOnPointer",
        "comment": "This function checks the value of the pointer (*param_2) and calls a function from a jumptable located at 0x558680, depending on the value."
    },
    {
        "offset": "0x1264c4",
        "suggestedName": "callJumptableBasedOnPointer",
        "comment": "This function checks the value of the pointer (*param_2) and calls a function from a jumptable located at 0x5586d0, based on the condition."
    },
    {
        "offset": "0x128174",
        "suggestedName": "initializeMemoryLocations",
        "comment": "This function initializes various memory locations and sets them to zero. Additionally, it sets a value to a constant (DAT_004520d0) and calls a function from PTR_FUN_00558ac0."
    },
    {
        "offset": "0x129528",
        "suggestedName": "returnMemoryValue",
        "comment": "This function returns the value stored at the memory location (param_1 + 0x124)."
    },
    {
        "offset": "0x129530",
        "suggestedName": "returnMemoryValue",
        "comment": "This function returns the value stored at the memory location (param_1 + 0x128)."
    },
    {
        "offset": "0x129538",
        "suggestedName": "returnMemoryValue",
        "comment": "This function returns the value stored at the memory location (param_1 + 0xe8)."
    },
    {
        "offset": "0x129540",
        "suggestedName": "returnConstantValue",
        "comment": "This function returns a constant value (0xffffffff) based on the provided conditions."
    },
    {
        "offset": "0x1295d8",
        "suggestedName": "callJumptableWithCondition",
        "comment": "This function checks the second parameter and calls a function from a jumptable located at 0x558f30, based on the result."
    },
    {
        "offset": "0x129650",
        "suggestedName": "returnSumOfMemoryValues",
        "comment": "This function returns the sum of values stored at three different memory locations (param_1 + 0x100, param_1 + 0xe8, param_1 + 0x118)."
    },
    {
        "offset": "0x1298ec",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x1298f0",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x129a5c",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x129b68",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x129b6c",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x129bc8",
        "suggestedName": "callFunctionFromDAT",
        "comment": "This function calls a function from DAT_00558fe8, which is a pointer to a function."
    },
    {
        "offset": "0x12a07c",
        "suggestedName": "returnConstantValue",
        "comment": "This function returns a constant value (1)."
    },
    {
        "offset": "0x12a084",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x12a088",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x12a6a0",
        "suggestedName": "callJumptableBasedOnConstant",
        "comment": "This function checks the value of a constant (DAT_005b1910) and calls a function from a jumptable located at 0x559Here's the updated JSON output for the functions, with comments added for those that return constants or reference constants:"
    },
    {
        "offset": "0x1160fc",
        "suggestedName": "callJumptableWithCondition",
        "comment": "This function checks if the input is greater than or equal to 0 and calls a function from a jumptable located at DAT_005561d0. The function behaves differently based on the input."
    },
    {
        "offset": "0x116cbc",
        "suggestedName": "callJumptableBasedOnParam2",
        "comment": "This function checks the value of the second parameter and uses it to select a function from a jumptable located at 0x556300."
    },
    {
        "offset": "0x116e6c",
        "suggestedName": "initializeParams",
        "comment": "This function initializes the provided parameter array by setting various memory locations to predefined values, including a reference to DAT_00548828, a constant."
    },
    {
        "offset": "0x116e80",
        "suggestedName": "resetMemoryLocation",
        "comment": "This function sets the value at the memory location (param_1 + 0x10) to zero, effectively resetting it."
    },
    {
        "offset": "0x1178cc",
        "suggestedName": "callJumptableBasedOnParam2",
        "comment": "This function checks the second parameter and calls a function from a jumptable located at 0x556370. The behavior is dependent on the parameter value."
    },
    {
        "offset": "0x117aac",
        "suggestedName": "bitwiseOperationCheck",
        "comment": "This function performs bitwise operations on the parameters and checks specific conditions, returning 0 or 1 based on the result."
    },
    {
        "offset": "0x117bc0",
        "suggestedName": "callJumptableBasedOnConstant",
        "comment": "This function uses the value of a constant (DAT_005b15c8) to determine which function to call from a jumptable located at 0x5563b0."
    },
    {
        "offset": "0x117f5c",
        "suggestedName": "returnMemoryValue",
        "comment": "This function returns the value stored at the memory location (param_1 + 0x78)."
    },
    {
        "offset": "0x1189b0",
        "suggestedName": "extractDataFromMemory",
        "comment": "This function extracts a value from memory and applies a NEON reverse operation (NEON_rev64) to it, storing the result in the provided parameter."
    },
    {
        "offset": "0x123c94",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x12429c",
        "suggestedName": "callJumptableWithCondition",
        "comment": "This function checks the value stored at (param_1 + 0x130) and selects a function to call from a jumptable located at 0x005582b0, based on the result."
    },
    {
        "offset": "0x1245c4",
        "suggestedName": "callJumptableWithBitwiseCheck",
        "comment": "This function checks the second parameter's bitwise value and selects a function from a jumptable located at 0x00558330 based on the result."
    },
    {
        "offset": "0x124a88",
        "suggestedName": "callJumptableBasedOnCharCondition",
        "comment": "This function checks the value at (param_1 + 0x122) and calls a function from a jumptable located at 0x00558360 based on this value."
    },
    {
        "offset": "0x12512c",
        "suggestedName": "callJumptableBasedOnPointer",
        "comment": "This function checks the value of the pointer (*param_2) and calls a function from a jumptable located at 0x558490 based on the condition."
    },
    {
        "offset": "0x125928",
        "suggestedName": "returnMemoryValue",
        "comment": "This function returns the value stored at the memory location (param_1 + 0x154)."
    },
    {
        "offset": "0x125930",
        "suggestedName": "returnMemoryValue",
        "comment": "This function returns the value stored at the memory location (param_1 + 0xe4)."
    },
    {
        "offset": "0x125938",
        "suggestedName": "callJumptableWithParam2",
        "comment": "This function uses the second parameter to select a function to call from a jumptable located at 0x005585b0, with the call dependent on a bit-shifted value."
    },
    {
        "offset": "0x1259c4",
        "suggestedName": "callJumptableWithCondition",
        "comment": "This function checks the second parameter and selects a function to call from a jumptable located at 0x005585d0."
    },
    {
        "offset": "0x1262d8",
        "suggestedName": "callJumptableBasedOnPointer",
        "comment": "This function checks the value of the pointer (*param_2) and calls a function from a jumptable located at 0x558680, depending on the value."
    },
    {
        "offset": "0x1264c4",
        "suggestedName": "callJumptableBasedOnPointer",
        "comment": "This function checks the value of the pointer (*param_2) and calls a function from a jumptable located at 0x5586d0, based on the condition."
    },
    {
        "offset": "0x128174",
        "suggestedName": "initializeMemoryLocations",
        "comment": "This function initializes various memory locations and sets them to zero. Additionally, it sets a value to a constant (DAT_004520d0) and calls a function from PTR_FUN_00558ac0."
    },
    {
        "offset": "0x129528",
        "suggestedName": "returnMemoryValue",
        "comment": "This function returns the value stored at the memory location (param_1 + 0x124)."
    },
    {
        "offset": "0x129530",
        "suggestedName": "returnMemoryValue",
        "comment": "This function returns the value stored at the memory location (param_1 + 0x128)."
    },
    {
        "offset": "0x129538",
        "suggestedName": "returnMemoryValue",
        "comment": "This function returns the value stored at the memory location (param_1 + 0xe8)."
    },
    {
        "offset": "0x129540",
        "suggestedName": "returnConstantValue",
        "comment": "This function returns a constant value (0xffffffff) based on the provided conditions."
    },
    {
        "offset": "0x1295d8",
        "suggestedName": "callJumptableWithCondition",
        "comment": "This function checks the second parameter and calls a function from a jumptable located at 0x558f30, based on the result."
    },
    {
        "offset": "0x129650",
        "suggestedName": "returnSumOfMemoryValues",
        "comment": "This function returns the sum of values stored at three different memory locations (param_1 + 0x100, param_1 + 0xe8, param_1 + 0x118)."
    },
    {
        "offset": "0x1298ec",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x1298f0",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x129a5c",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x129b68",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x129b6c",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x129bc8",
        "suggestedName": "callFunctionFromDAT",
        "comment": "This function calls a function from DAT_00558fe8, which is a pointer to a function."
    },
    {
        "offset": "0x12a07c",
        "suggestedName": "returnConstantValue",
        "comment": "This function returns a constant value (1)."
    },
    {
        "offset": "0x12a084",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x12a088",
        "suggestedName": "emptyFunction",
        "comment": "This function does nothing and returns immediately."
    },
    {
        "offset": "0x12a6a0",
        "suggestedName": "callJumptableBasedOnConstant",
        "comment": "This function checks the value of a constant (DAT_005b1910) and calls a function from a jumThank you for your instructions! I have taken note of your preferences regarding constants like `DAT` and the requirement to mention them in the comments where applicable. I'll apply this approach going forward. Please let me know if you'd like to continue with additional entries or if you have any further requests!"
    },
    {
        "offset": "0x12f604",
        "function_name": "callVTableWithJumpTable",
        "comment": "This function indirectly jumps to a function via a vtable located at DAT_005599e0. The jump table is determined based on a condition involving the third parameter."
    },
    {
        "offset": "0x12f7bc",
        "function_name": "callVTableWithParam2Check",
        "comment": "This function selects a jump table entry based on a condition related to the second parameter and then indirectly jumps to the corresponding function via the vtable."
    },
    {
        "offset": "0x12f914",
        "function_name": "callVTableWithParam2Check",
        "comment": "This function selects a jump table entry based on the second parameter, then makes an indirect jump using the corresponding entry in the vtable."
    },
    {
        "offset": "0x12fb10",
        "function_name": "callVTableWithParam2Check",
        "comment": "Similar to previous functions, it selects a jump table entry based on the second parameter and performs an indirect jump using the appropriate entry from the vtable."
    },
    {
        "offset": "0x12ffd4",
        "function_name": "ret_0",
        "comment": "This function simply returns 0, representing a constant return value."
    },
    {
        "offset": "0x12fffc",
        "function_name": "callVTableWithParam2Check",
        "comment": "The function uses a check on the second parameter to determine which jump table entry to call, using a vtable at DAT_00559b20."
    },
    {
        "offset": "0x130280",
        "function_name": "callVTableWithParam2Check",
        "comment": "This function selects a jump table entry based on the second parameter and calls the function at the corresponding entry in the vtable."
    },
    {
        "offset": "0x130478",
        "function_name": "callVTableWithParam2Check",
        "comment": "The jump table is chosen based on the second parameter, and the function proceeds to call the appropriate function via an indirect jump."
    },
    {
        "offset": "0x13076c",
        "function_name": "callVTableWithParam1Check",
        "comment": "This function calls a jump table based on a condition involving the first parameter and then indirectly jumps to the corresponding function."
    },
    {
        "offset": "0x131038",
        "function_name": "callVTableWithMultipleParams",
        "comment": "The function decides which jump table entry to use based on the combination of several parameters, then indirectly jumps to the selected function in the vtable."
    },
    {
        "offset": "0x13118c",
        "function_name": "callVTableWithDATCheck",
        "comment": "This function selects a jump table entry based on the value of DAT_005b1938 and performs an indirect jump to the function stored at the corresponding vtable entry."
    },
    {
        "offset": "0x131264",
        "function_name": "callVTableWithDATCheck",
        "comment": "Similar to the previous function, this one checks the value of DAT_005b1938 and calls a function from the corresponding entry in the jump table."
    },
    {
        "offset": "0x1312dc",
        "function_name": "initStructWithDAT",
        "comment": "This function initializes a structure by setting various fields to zero and assigning a constant value from DAT_00548c10 to the first field."
    },
    {
        "offset": "0x131574",
        "function_name": "simply_ret",
        "comment": "This function simply returns without performing any significant operation."
    },
    {
        "offset": "0x131578",
        "function_name": "callVTableWithMultipleParams",
        "comment": "This function uses multiple parameters to select a jump table entry and then performs an indirect jump using the corresponding function from the vtable."
    },
    {
        "offset": "0x131a9c",
        "function_name": "callVTableWithParam2Check",
        "comment": "This function makes a decision based on the second parameter to choose the jump table entry, then calls the corresponding function via the vtable."
    },
    {
        "offset": "0x132dcc",
        "function_name": "callVTableWithParam1Check",
        "comment": "This function selects a jump table entry based on the first parameter and calls the corresponding function."
    },
    {
        "offset": "0x132f18",
        "function_name": "callVTableWithParam2Check",
        "comment": "The jump table entry is selected based on the second parameter, and an indirect call is made to the function stored at the corresponding entry."
    },
    {
        "offset": "0x133354",
        "function_name": "callVTableWithMultipleParams",
        "comment": "The function determines the correct jump table entry based on the given parameters and calls the corresponding function."
    },
    {
        "offset": "0x1336a4",
        "function_name": "simply_ret",
        "comment": "This function simply returns without performing any operation."
    },
    {
        "offset": "0x13392c",
        "function_name": "simply_ret",
        "comment": "This function also simply returns without doing any computation."
    },
    {
        "offset": "0x134018",
        "function_name": "ret_p1",
        "comment": "This function returns the value of a specific memory address as an undefined byte, typically used to access a specific byte in memory."
    },
    {
        "offset": "0x1350c0",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at a specific memory address as an undefined 8-byte value."
    },
    {
        "offset": "0x1350c8",
        "function_name": "simply_ret",
        "comment": "This function is a simple return with no operation performed."
    },
    {
        "offset": "0x1351f4",
        "function_name": "callVTableWithDATCheck",
        "comment": "The jump table entry is selected based on the value of DAT_005b1968, and an indirect jump is made to the corresponding function."
    },
    {
        "offset": "0x135a90",
        "function_name": "checkParam1",
        "comment": "This function checks a condition on the first parameter and returns a boolean result based on the comparison with a constant value (0x14)."
    },
    {
        "offset": "0x135ca0",
        "function_name": "calculateTimeDifference",
        "comment": "This function calculates a time difference based on two sets of long values (param_1 and param_2) and returns the result."
    },
    {
        "offset": "0x135cd8",
        "function_name": "callVTableWithParamCheck",
        "comment": "This function checks the condition on the parameter (param_1) and calls the corresponding function in the jump table based on that condition."
    },
    {
        "offset": "0x1361e0",
        "function_name": "simply_ret",
        "comment": "This function resets certain memory locations to zero and then simply returns."
    },
    {
        "offset": "0x1365ac",
        "function_name": "callVTableWithParamCheck",
        "comment": "This function chooses the jump table entry based on a specific check on the parameter (param_1) and calls the corresponding function."
    },
    {
        "offset": "0x136ce0",
        "function_name": "resetMemoryLocation",
        "comment": "This function resets a specific memory location (param_1 + 0x18) to zero and then returns."
    },
    {
        "offset": "0x136e4c",
        "function_name": "callVTableWithParamCheck",
        "comment": "This function checks a condition on two memory addresses and makes an indirect jump to the corresponding function based on the outcome."
    },
    {
        "offset": "0x258ea0",
        "function_name": "assignParam2ToParam1",
        "comment": "This function assigns the value of param_2 to *param_1, and then returns."
    },
    {
        "offset": "0x258f10",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x258fe8",
        "function_name": "simply_ret",
        "comment": "This function simply returns without performing any significant action."
    },
    {
        "offset": "0x2592c8",
        "function_name": "compareParams",
        "comment": "Compares two character parameters and returns true if they are equal."
    },
    {
        "offset": "0x2596f8",
        "function_name": "ret_p1",
        "comment": "Returns the value of param_1."
    },
    {
        "offset": "0x25970c",
        "function_name": "assignParamsToLongs",
        "comment": "This function assigns values to an array of longs based on the second and third parameters."
    },
    {
        "offset": "0x2597b0",
        "function_name": "ret_p1",
        "comment": "Returns the value of param_1."
    },
    {
        "offset": "0x2597c4",
        "function_name": "updateMemoryWithParam1",
        "comment": "Updates the memory location pointed by *param_1 with a value derived from *param_1 + 8."
    },
    {
        "offset": "0x259cb0",
        "function_name": "ret_large_constant",
        "comment": "Returns a constant value, 0x1fffffffffffffff."
    },
    {
        "offset": "0x259cec",
        "function_name": "ret_p1",
        "comment": "Returns the value of param_1."
    },
    {
        "offset": "0x259e04",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x259ee0",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x25a150",
        "function_name": "ret_p1",
        "comment": "Returns the value of param_1."
    },
    {
        "offset": "0x25bc28",
        "function_name": "assignParam1ToParam1AtIndex4",
        "comment": "This function assigns *param_1 to param_1[4], then returns 1."
    },
    {
        "offset": "0x25bc70",
        "function_name": "setParam1ToNewValue",
        "comment": "Assigns a new value to *param_1 based on param_1[2] and returns 1."
    },
    {
        "offset": "0x25bcd4",
        "function_name": "setParam1ToNewValue",
        "comment": "Similar to the previous function, it modifies *param_1 with param_1[2] + 6."
    },
    {
        "offset": "0x25be24",
        "function_name": "getValueAtOffset",
        "comment": "Returns the value stored at param_2 + 0x418."
    },
    {
        "offset": "0x25becc",
        "function_name": "assignParam1ToParam1AtIndex4",
        "comment": "This function assigns *param_1 to param_1[4], then returns 1."
    },
    {
        "offset": "0x25ccbc",
        "function_name": "simply_ret",
        "comment": "This function simply returns without performing any operation."
    },
    {
        "offset": "0x25e4e8",
        "function_name": "resetParam1ToZero",
        "comment": "Sets *param_1 to 0 and returns 1."
    },
    {
        "offset": "0x25e524",
        "function_name": "resetParam1ToZero",
        "comment": "Resets *param_1 to 0 and returns 1."
    },
    {
        "offset": "0x25f580",
        "function_name": "incrementValueAtOffset",
        "comment": "Increments the value at param_3 + 0x168 by 1, then returns the updated value."
    },
    {
        "offset": "0x25fcd4",
        "function_name": "assignParam3ToMemoryLocations",
        "comment": "Assigns param_3 to two memory locations, one at param_2 + 0x418 and another dereferenced at param_2 + 0x408."
    },
    {
        "offset": "0x2603f4",
        "function_name": "resetParam1ToZero",
        "comment": "Sets *param_1 to 0 and returns 1."
    },
    {
        "offset": "0x260430",
        "function_name": "resetParam1ToZero",
        "comment": "Sets *param_1 to 0 and returns 1."
    },
    {
        "offset": "0x260f98",
        "function_name": "resetParam1ToZero",
        "comment": "Sets *param_1 to 0 and returns 1."
    },
    {
        "offset": "0x261a08",
        "function_name": "assignParam2ToParam1",
        "comment": "Assigns param_2 to *param_1 and returns."
    },
    {
        "offset": "0x261d48",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x261d60",
        "function_name": "incrementParam1",
        "comment": "Increments *param_1 by 0x204 and returns the updated param_1."
    },
    {
        "offset": "0x261ed4",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x261f00",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x26296c",
        "function_name": "calculateNewValue",
        "comment": "Calculates a value based on param_2 and returns param_2 + 0x418, or 0 if param_2 is 0."
    },
    {
        "offset": "0x262e80",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x262eac",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x262ed8",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x262f04",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x262f30",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x262f5c",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x2630c0",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x263824",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x263850",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x26387c",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x26543c",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x265468",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x267934",
        "function_name": "calculateOffset",
        "comment": "Returns the sum of *param_1 and param_2 * 0x40."
    },
    {
        "offset": "0x267960",
        "function_name": "calculateOffset",
        "comment": "Returns the sum of *param_1 and param_2 * 0x70."
    },
    {
        "offset": "0x26798c",
        "function_name": "calculateOffset",
        "comment": "Returns the sum of *param_1 and param_2 * 0xa0."
    },
    {
        "offset": "0x2679b8",
        "function_name": "calculateOffset",
        "comment": "Returns the sum of *param_1 and param_2 * 0x70."
    },
    {
        "offset": "0x2679e4",
        "function_name": "simply_ret",
        "comment": "This function simply returns without any action."
    },
    {
        "offset": "0x2679e8",
        "function_name": "simply_ret",
        "comment": "This function performs no operation and just returns."
    },
    {
        "offset": "0x267b6c",
        "function_name": "ret_p1",
        "comment": "Returns the value of param_1."
    },
    {
        "offset": "0x267ba4",
        "function_name": "simply_ret",
        "comment": "Returns nothing and simply exits."
    },
    {
        "offset": "0x267bb4",
        "function_name": "ret_p1",
        "comment": "Returns the value of param_1."
    },
    {
        "offset": "0x267e08",
        "function_name": "ret_p1",
        "comment": "Returns the value of param_1."
    },
    {
        "offset": "0x267e6c",
        "function_name": "ret_p1",
        "comment": "Returns the value of param_1."
    },
    {
        "offset": "0x267e80",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x267f30",
        "function_name": "simply_ret",
        "comment": "No action, simply returns."
    },
    {
        "offset": "0x2680b4",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x2680ec",
        "function_name": "simply_ret",
        "comment": "Simply returns without action."
    },
    {
        "offset": "0x2680fc",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at param_1."
    },
    {
        "offset": "0x268350",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x268364",
        "function_name": "simply_ret",
        "comment": "This function performs no action and just returns."
    },
    {
        "offset": "0x26543c",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x265468",
        "function_name": "ret_1",
        "comment": "Returns the constant value 1."
    },
    {
        "offset": "0x267934",
        "function_name": "calculateOffset",
        "comment": "Returns the sum of *param_1 and param_2 * 0x40."
    },
    {
        "offset": "0x267960",
        "function_name": "calculateOffset",
        "comment": "Returns the sum of *param_1 and param_2 * 0x70."
    },
    {
        "offset": "0x26798c",
        "function_name": "calculateOffset",
        "comment": "Returns the sum of *param_1 and param_2 * 0xa0."
    },
    {
        "offset": "0x2679b8",
        "function_name": "calculateOffset",
        "comment": "Returns the sum of *param_1 and param_2 * 0x70."
    },
    {
        "offset": "0x26837c",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x268390",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x268440",
        "function_name": "simply_ret",
        "comment": "Returns without any operation."
    },
    {
        "offset": "0x268890",
        "function_name": "ret_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x2688b0",
        "function_name": "compare_p2_p3",
        "comment": "Compares param_2 with param_3 and returns the result of the comparison."
    },
    {
        "offset": "0x2688ec",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x268900",
        "function_name": "compare_p1_p2",
        "comment": "Compares *param_1 with *param_2 and returns the result of the comparison."
    },
    {
        "offset": "0x26895c",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x268970",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x268a00",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x268ef0",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x269078",
        "function_name": "ret_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x269164",
        "function_name": "set_p1_p3",
        "comment": "Sets *param_1 to param_2 and *(byte *)(param_1 + 1) to param_3 & 1."
    },
    {
        "offset": "0x269358",
        "function_name": "ret_constant",
        "comment": "Returns the constant value 0x555555555555555."
    },
    {
        "offset": "0x269374",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x269400",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x269450",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x2696d4",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x269710",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x269750",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x2697d8",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x269900",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x269b84",
        "function_name": "ret_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x269ba4",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x269d68",
        "function_name": "ret_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x269dd8",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x269df0",
        "function_name": "simply_ret",
        "comment": "Returns without any operation."
    },
    {
        "offset": "0x269f74",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x269fac",
        "function_name": "simply_ret",
        "comment": "Returns without any operation."
    },
    {
        "offset": "0x269fbc",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26a210",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26a27c",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26a290",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26a730",
        "function_name": "ret_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x26a750",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26a764",
        "function_name": "compare_p1_p2",
        "comment": "Compares *param_1 with *param_2 and returns the result of the comparison."
    },
    {
        "offset": "0x26a7c0",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26a7d4",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x26adfc",
        "function_name": "ret_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x26aee8",
        "function_name": "set_p1_p3",
        "comment": "Sets *param_1 to param_2 and *(byte *)(param_1 + 1) to param_3 & 1."
    },
    {
        "offset": "0x26b0dc",
        "function_name": "ret_constant",
        "comment": "Returns the constant value 0x3ffffffffffffff."
    },
    {
        "offset": "0x26b0f4",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26b180",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26b1d0",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26b450",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26b490",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26b518",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26b640",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26b678",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26b68c",
        "function_name": "simply_ret",
        "comment": "Returns without any operation."
    },
    {
        "offset": "0x26b804",
        "function_name": "simply_ret",
        "comment": "Returns without any operation."
    },
    {
        "offset": "0x26b814",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26c284",
        "function_name": "ret_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x26c2a4",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26c2b8",
        "function_name": "compare_p1_p2",
        "comment": "Compares"
    },
    {
        "offset": "0x26c2b8",
        "function_name": "compare_p1_p2",
        "comment": "Compares *param_1 with *param_2 and returns the result of the comparison."
    },
    {
        "offset": "0x26c314",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26c328",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x26c3b8",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26c9ac",
        "function_name": "ret_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x26ca98",
        "function_name": "set_p1_p3",
        "comment": "Sets *param_1 to param_2 and *(byte *)(param_1 + 1) to param_3 & 1."
    },
    {
        "offset": "0x26cc8c",
        "function_name": "ret_constant",
        "comment": "Returns the constant value 0x3ffffffffffffff."
    },
    {
        "offset": "0x26cca4",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26cd30",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x26cd80",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x242210",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x2422ec",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x24255c",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x2426f4",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x2426f8",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x242708",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x2439b4",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x2439cc",
        "function_name": "increment_param_1",
        "comment": "Increments *param_1 by 0x10 and returns the updated param_1."
    },
    {
        "offset": "0x245a5c",
        "function_name": "compare_p2_field",
        "comment": "Compares certain fields of param_2 and updates the value at param_2 + 0x418 based on the comparison."
    },
    {
        "offset": "0x245e0c",
        "function_name": "compare_p1_p2",
        "comment": "Compares *param_1 with param_1[1] and returns the result of the comparison."
    },
    {
        "offset": "0x245e90",
        "function_name": "add_param_2_to_p1",
        "comment": "Adds param_2 * 8 to *param_1 and returns the result."
    },
    {
        "offset": "0x248b40",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x248b54",
        "function_name": "set_p1_p2_p3",
        "comment": "Sets *param_1 to param_2, param_1[1] to value at (param_2 + 8), and param_1[2] based on param_3."
    },
    {
        "offset": "0x248bf8",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x248c0c",
        "function_name": "set_p1_1_to_p1_2",
        "comment": "Sets the value at *param_1 + 8 to param_1[1]."
    },
    {
        "offset": "0x249110",
        "function_name": "ret_constant",
        "comment": "Returns the constant value 0xfffffffffffffff."
    },
    {
        "offset": "0x24914c",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x249264",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x249340",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x24956c",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x249654",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x2496c0",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x2496d4",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x2498d0",
        "function_name": "set_p1_to_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x249940",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x249d24",
        "function_name": "set_p1_to_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x249d44",
        "function_name": "compare_p1_p2",
        "comment": "Compares *param_1 with *param_2 and returns the result."
    },
    {
        "offset": "0x249ec4",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x249ed4",
        "function_name": "set_p1_to_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x249ef4",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x24bd90",
        "function_name": "add_offset_to_param_1",
        "comment": "Adds param_2 to *(param_1 + 0x58) and returns the result."
    },
    {
        "offset": "0x24bdb4",
        "function_name": "get_value_from_offset",
        "comment": "Returns the value at *(param_1 + 0x58)."
    },
    {
        "offset": "0x24bdcc",
        "function_name": "get_value_from_offset_50",
        "comment": "Returns the value at *(param_1 + 0x50)."
    },
    {
        "offset": "0x24bde4",
        "function_name": "get_value_from_offset_3c",
        "comment": "Returns the value at *(param_1 + 0x3c)."
    },
    {
        "offset": "0x24bf24",
        "function_name": "calculate_distance_between_p1_and_p2",
        "comment": "Calculates and returns the difference between param_1[1] and param_1, divided by 4."
    },
    {
        "offset": "0x24bf4c",
        "function_name": "multiply_param_2_by_4_and_add_to_p1",
        "comment": "Adds param_2 * 4 to *param_1 and returns the result."
    },
    {
        "offset": "0x24c000",
        "function_name": "get_value_from_offset_48",
        "comment": "Returns the value at *(param_1 + 0x48)."
    },
    {
        "offset": "0x24c018",
        "function_name": "get_difference_between_offset_48_and_4c",
        "comment": "Returns the difference between *(param_1 + 0x48) and *(param_1 + 0x4c)."
    },
    {
        "offset": "0x24c038",
        "function_name": "get_value_from_offset_4c",
        "comment": "Returns the value at *(param_1 + 0x4c)."
    },
    {
        "offset": "0x24c050",
        "function_name": "get_value_from_offset_40",
        "comment": "Returns the value at *(param_1 + 0x40)."
    },
    {
        "offset": "0x24c068",
        "function_name": "get_value_from_offset_44",
        "comment": "Returns the value at *(param_1 + 0x44)."
    },
    {
        "offset": "0x24c080",
        "function_name": "get_value_from_offset_160",
        "comment": "Returns the value at *(param_1 + 0x160)."
    },
    {
        "offset": "0x24c110",
        "function_name": "compare_param_2_with_offset_48",
        "comment": "Compares param_2 with *(param_1 + 0x48) and returns true if param_2 is less than or equal to *(param_1 + 0x48)."
    },
    {
        "offset": "0x24d258",
        "function_name": "call_software_breakpoint",
        "comment": "Calls a software breakpoint and does not return."
    },
    {
        "offset": "0x24d264",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x24d3dc",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x24d3ec",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24d564",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x24d710",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x24d77c",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24d82c",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24d9c0",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x24da3c",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24dc44",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24dc58",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x24ddcc",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x24dee0",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24e03c",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24e050",
        "function_name": "set_p1_p2_p3",
        "comment": "Sets *param_1 to param_2, param_1[1] to value at (param_2 + 8), and param_1[2] based on param_3."
    },
    {
        "offset": "0x24e0f4",
        "function_name": "set_p1_1_to_p1_2",
        "comment": "Sets the value at *param_1 + 8 to param_1[1]."
    },
    {
        "offset": "0x24e5e0",
        "function_name": "ret_constant",
        "comment": "Returns the constant value 0x3fffffffffffffff."
    },
    {
        "offset": "0x24e61c",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24e734",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24e810",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x24ea80",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24ed50",
        "function_name": "set_p1_to_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x24ed70",
        "function_name": "increment_param_1_by_4",
        "comment": "Increments *param_1 by param_2 * 4 and returns the updated param_1."
    },
    {
        "offset": "0x24ef44",
        "function_name": "simply_ret",
        "comment": "Does nothing and returns immediately."
    },
    {
        "offset": "0x24ef58",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x24ef70",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x24f0b8",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24f320",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24f6e4",
        "function_name": "compare_p2_with_p3",
        "comment": "Compares *param_2 with *param_3 and returns true if param_2 is less than param_3."
    },
    {
        "offset": "0x24f720",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24f758",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24fc48",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x24fdd0",
        "function_name": "set_p1_to_p2",
        "comment": "Sets *param_1 to param_2 and returns."
    },
    {
        "offset": "0x24febc",
        "function_name": "set_p1_to_p2_with_flag",
        "comment": "Sets *param_1 to param_2 and sets param_1[1] to param_3 & 1."
    },
    {
        "offset": "0x2500b0",
        "function_name": "ret_constant",
        "comment": "Returns the constant value 0x666666666666666."
    },
    {
        "offset": "0x2500cc",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x250158",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x2501a8",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x250420",
        "function_name": "ret_p1",
        "comment": "Returns the value stored at *param_1."
    },
    {
        "offset": "0x25045c",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x25049c",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x2504d4",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    },
    {
        "offset": "0x2505fc",
        "function_name": "ret_p1",
        "comment": "Returns param_1 unchanged."
    }
]